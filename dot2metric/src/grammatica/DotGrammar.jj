/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(DotGrammar)package grammatica;
public class DotGrammar{
    public static void main(String args []) throws ParseException  {      System.out.print("dot2metric");  }}PARSER_END(DotGrammar)SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}




TOKEN : /*OPERANDI CARATTERI-SINGOLI*/
{
  < DUE_PUNTI  : ":" >
| < MAGGIORE : ">" >
| < UGUALE  : "=" >
| < VIRGOLA  : "," >
| < MINORE : "<" >
| < PUNTO_E_VIRGOLA : ";" >
| < PARENTESI_QUADRA_APERTA : "[" >
| < PARENTESI_QUADRA_CHIUSA : "]" >
| < PARENTESI_GRAFFA_APERTA : "{" >
| < PARENTESI_GRAFFA_CHIUSA : "}" >

}

TOKEN : /*OPERANDI MULTI-CARATTERI*/
{
< ARCO  : "->" >
| < BACKSLASH : "\"">
}

TOKEN : /*PAROLE_CHIAVI*/
{
< NODE : ("n"|"N")("o"|"O")("d"|"D")("e"|"E") >
| < EDGE : ("e"|"E")("d"|"D")("g"|"G")("e"|"E")>
| < DIGRAPH : ("d"|"D")("i"|"I")("g"|"G")("r"|"R")("a"|"A")("p"|"P")("h"|"H") >
| < GRAPH : ("g"|"G")("r"|"R")("a"|"A")("p"|"P")("h"|"H") >
| < SUBGRAPH : ("s"|"S")("u"|"U")("b"|"B")("g"|"G")("r"|"R")("a"|"A")("p"|"P")("h"|"H") >
| < STRICT : ("s"|"S")("t"|"T")("r"|"R")("i"|"I")("c"|"C")("t"|"T") >
| < RANKDIR : ("r"|"R")("a"|"A")("n"|"N")("k"|"K")("d"|"D")("i"|"I")("r"|"R") >
}

TOKEN : /*ATTRIBUTI*/
{
  < STYLE : "style" >
| < COLOR : "color">
| < FONTSIZE : "fontsize" >
| < FILLCOLOR : "fillcolor" >
| < HEIGHT : "height" >
| < WIDTH : "width" >
| < URL : "URL" >
| < LABEL : "label" >
| < SHAPE : "shape" >
| < FONTNAME  : "fontname" >
| < FONTCOLOR  : "fontcolor" >
| < LABELFONTSIZE : "labelfontsize" >
| < LABELFONTNAME : "labelfontname">
| < BGCOLOR : "bgcolor">
| < PENCOLOR : "pencolor">
}

TOKEN : /*NUMERI*/
{
 < #DIGITS : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

TOKEN : /*LETTERALI*/
{
 < #LETTER : (["a"-"z", "A"-"Z", "_"]) >
| < #ESCAPED_QUOTES : ("\\")("\"") >
}

TOKEN : /*ID = STRING | NUMERAL | DOUBLE_QUOTED_STRING | HTML_STRING */
{
 < ID :  (("-")?((".")< DIGITS >| < DIGITS >("."((< DIGIT >)*))))								/* NUMERICO */
| (< LETTER >(< LETTER >|< DIGIT >)*)															/* STRINGA */
| (< BACKSLASH >(~[" ","\r","\t","\n","\""]|(< ESCAPED_QUOTES >))*< BACKSLASH >)				/* DOUBLE_QUOTED_STRING*/
| (< MAGGIORE >(~[" ","\r","\t","\n"])* < MINORE >)>											/* STRINGA_HTML */
}




String start():
{
  Token t1,t2;
  String nome_metodo;
  }
{

 	
	nome_metodo= getNomeMetodo()

	< PARENTESI_GRAFFA_APERTA > { System.out.println("INCONTRATA PARENTESI GRAFFA APERTA");}

	skip_intestazione()

	gestioneNodi()
	

	< PARENTESI_GRAFFA_CHIUSA > { System.out.println("INCONTRATA PARENTESI GRAFFA CHIUSA");}
 	
  	{return nome_metodo; }

  	
  
}

String getNomeMetodo():
{
  Token t;
  String nome_metodo;
  }
{
	<DIGRAPH> t =  <ID>
	{
	  	nome_metodo= t.image;
   		System.out.println("package: " + t.image);
  	}
 	
  	{return nome_metodo; }

  	
  
}

void skip_intestazione(): {
  Token t;
  } {
  
	
	(	  ( < EDGE > | < NODE > ) < PARENTESI_QUADRA_APERTA >
		
		( ( < FONTNAME > | < FONTSIZE > | < LABELFONTNAME > | < LABELFONTSIZE > | < SHAPE > ) < UGUALE > < ID > (< VIRGOLA >)*)*

		< PARENTESI_QUADRA_CHIUSA > < PUNTO_E_VIRGOLA >
	)* 

	

	< RANKDIR > < UGUALE > < ID > < PUNTO_E_VIRGOLA >
	
}

void gestioneNodi(): {
  Token t;
  } {
    	   (	     t = < ID > { System.out.println(t.image);} (dichiarazioneNodo() | dichiarazioneArco())
	     )*

     }

void dichiarazioneNodo(): {
  Token t;
  } {

	
	  
	 <PARENTESI_QUADRA_APERTA >	
		(
		 (			( < HEIGHT > | < WIDTH > | < COLOR > | < FILLCOLOR > | < STYLE > | < FONTCOLOR > | < URL > )
		 	< UGUALE > < ID > (< VIRGOLA >)*
		 )|(
			< LABEL > 
		 	< UGUALE > t = < ID > { System.out.println(t.image);} (< VIRGOLA >)*
		   )
		)*
	< PARENTESI_QUADRA_CHIUSA > < PUNTO_E_VIRGOLA >

     }

 void dichiarazioneArco(): {
  Token t;
  } {

	
	  
	 < ARCO > t = < ID > { System.out.println(t.image);}
		<PARENTESI_QUADRA_APERTA > (
									 ( < COLOR > | < FONTSIZE > | < STYLE > | < FONTNAME > )
									 < UGUALE > < ID > (< VIRGOLA >)*
									)*
		< PARENTESI_QUADRA_CHIUSA > < PUNTO_E_VIRGOLA >

     }
